{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar react_1 = (0, tslib_1.__importStar)(require(\"react\"));\nvar size_sensor_1 = require(\"size-sensor\");\nvar pick_1 = require(\"./helper/pick\");\nvar is_function_1 = require(\"./helper/is-function\");\nvar is_string_1 = require(\"./helper/is-string\");\nvar is_equal_1 = require(\"./helper/is-equal\");\n/**\n * core component for echarts binding\n */\nvar EChartsReactCore = /** @class */function (_super) {\n  (0, tslib_1.__extends)(EChartsReactCore, _super);\n  function EChartsReactCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.echarts = props.echarts;\n    _this.ele = null;\n    _this.isInitialResize = true;\n    return _this;\n  }\n  EChartsReactCore.prototype.componentDidMount = function () {\n    this.renderNewEcharts();\n  };\n  // update\n  EChartsReactCore.prototype.componentDidUpdate = function (prevProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    var shouldSetOption = this.props.shouldSetOption;\n    if ((0, is_function_1.isFunction)(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (!(0, is_equal_1.isEqual)(prevProps.theme, this.props.theme) || !(0, is_equal_1.isEqual)(prevProps.opts, this.props.opts) || !(0, is_equal_1.isEqual)(prevProps.onEvents, this.props.onEvents)) {\n      this.dispose();\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n    // when these props are not isEqual, update echarts\n    var pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!(0, is_equal_1.isEqual)((0, pick_1.pick)(this.props, pickKeys), (0, pick_1.pick)(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!(0, is_equal_1.isEqual)(prevProps.style, this.props.style) || !(0, is_equal_1.isEqual)(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  };\n  EChartsReactCore.prototype.componentWillUnmount = function () {\n    this.dispose();\n  };\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  EChartsReactCore.prototype.getEchartsInstance = function () {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  };\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  EChartsReactCore.prototype.dispose = function () {\n    if (this.ele) {\n      try {\n        (0, size_sensor_1.clear)(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  };\n  /**\n   * render a new echarts instance\n   */\n  EChartsReactCore.prototype.renderNewEcharts = function () {\n    var _this = this;\n    var _a = this.props,\n      onEvents = _a.onEvents,\n      onChartReady = _a.onChartReady;\n    // 1. new echarts instance\n    var echartsInstance = this.updateEChartsOption();\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n    // 3. on chart ready\n    if ((0, is_function_1.isFunction)(onChartReady)) onChartReady(echartsInstance);\n    // 4. on resize\n    if (this.ele) {\n      (0, size_sensor_1.bind)(this.ele, function () {\n        _this.resize();\n      });\n    }\n  };\n  // bind the events\n  EChartsReactCore.prototype.bindEvents = function (instance, events) {\n    function _bindEvent(eventName, func) {\n      // ignore the event config which not satisfy\n      if ((0, is_string_1.isString)(eventName) && (0, is_function_1.isFunction)(func)) {\n        // binding event\n        instance.on(eventName, function (param) {\n          func(param, instance);\n        });\n      }\n    }\n    // loop and bind\n    for (var eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  };\n  /**\n   * render the echarts\n   */\n  EChartsReactCore.prototype.updateEChartsOption = function () {\n    var _a = this.props,\n      option = _a.option,\n      _b = _a.notMerge,\n      notMerge = _b === void 0 ? false : _b,\n      _c = _a.lazyUpdate,\n      lazyUpdate = _c === void 0 ? false : _c,\n      showLoading = _a.showLoading,\n      _d = _a.loadingOption,\n      loadingOption = _d === void 0 ? null : _d;\n    // 1. get or initial the echarts object\n    var echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);else echartInstance.hideLoading();\n    return echartInstance;\n  };\n  /**\n   * resize wrapper\n   */\n  EChartsReactCore.prototype.resize = function () {\n    // 1. get the echarts object\n    var echartsInstance = this.getEchartsInstance();\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  };\n  EChartsReactCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      style = _a.style,\n      _b = _a.className,\n      className = _b === void 0 ? '' : _b;\n    // default height = 300\n    var newStyle = (0, tslib_1.__assign)({\n      height: 300\n    }, style);\n    return react_1.default.createElement(\"div\", {\n      ref: function (e) {\n        _this.ele = e;\n      },\n      style: newStyle,\n      className: \"echarts-for-react \" + className\n    });\n  };\n  return EChartsReactCore;\n}(react_1.PureComponent);\nexports.default = EChartsReactCore;","map":{"version":3,"names":["react_1","tslib_1","__importStar","require","size_sensor_1","pick_1","is_function_1","is_string_1","is_equal_1","EChartsReactCore","_super","__extends","props","_this","call","echarts","ele","isInitialResize","prototype","componentDidMount","renderNewEcharts","componentDidUpdate","prevProps","shouldSetOption","isFunction","isEqual","theme","opts","onEvents","dispose","pickKeys","pick","updateEChartsOption","style","className","resize","componentWillUnmount","getEchartsInstance","getInstanceByDom","init","clear","e","console","warn","_a","onChartReady","echartsInstance","bindEvents","bind","instance","events","_bindEvent","eventName","func","isString","on","param","Object","hasOwnProperty","option","_b","notMerge","_c","lazyUpdate","showLoading","_d","loadingOption","echartInstance","setOption","hideLoading","render","newStyle","__assign","height","default","createElement","ref","PureComponent"],"sources":["C:\\Users\\harti\\denish-admin\\Frontend\\node_modules\\echarts-for-react\\src\\core.tsx"],"sourcesContent":["import type { ECharts } from 'echarts';\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nexport default class EChartsReactCore extends PureComponent<EChartsReactProps> {\n  /**\n   * echarts render container\n   */\n  public ele: HTMLElement;\n\n  /**\n   * if this is the first time we are resizing\n   */\n  private isInitialResize: boolean;\n\n  /**\n   * echarts library entry\n   */\n  protected echarts: any;\n\n  constructor(props: EChartsReactProps) {\n    super(props);\n\n    this.echarts = props.echarts;\n    this.ele = null;\n    this.isInitialResize = true;\n  }\n\n  componentDidMount() {\n    this.renderNewEcharts();\n  }\n\n  // update\n  componentDidUpdate(prevProps: EChartsReactProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    const { shouldSetOption } = this.props;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (\n      !isEqual(prevProps.theme, this.props.theme) ||\n      !isEqual(prevProps.opts, this.props.opts) ||\n      !isEqual(prevProps.onEvents, this.props.onEvents)\n    ) {\n      this.dispose();\n\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n\n    // when these props are not isEqual, update echarts\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.dispose();\n  }\n\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  public getEchartsInstance(): ECharts {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  }\n\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  private dispose() {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  }\n\n  /**\n   * render a new echarts instance\n   */\n  private renderNewEcharts() {\n    const { onEvents, onChartReady } = this.props;\n\n    // 1. new echarts instance\n    const echartsInstance = this.updateEChartsOption();\n\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, () => {\n        this.resize();\n      });\n    }\n  }\n\n  // bind the events\n  private bindEvents(instance, events: EChartsReactProps['onEvents']) {\n    function _bindEvent(eventName: string, func: Function) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, (param) => {\n          func(param, instance);\n        });\n      }\n    }\n\n    // loop and bind\n    for (const eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  }\n\n  /**\n   * render the echarts\n   */\n  private updateEChartsOption(): EChartsInstance {\n    const { option, notMerge = false, lazyUpdate = false, showLoading, loadingOption = null } = this.props;\n    // 1. get or initial the echarts object\n    const echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n\n    return echartInstance;\n  }\n\n  /**\n   * resize wrapper\n   */\n  private resize() {\n    // 1. get the echarts object\n    const echartsInstance = this.getEchartsInstance();\n\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  }\n\n  render(): JSX.Element {\n    const { style, className = '' } = this.props;\n    // default height = 300\n    const newStyle = { height: 300, ...style };\n\n    return (\n      <div\n        ref={(e: HTMLElement) => {\n          this.ele = e;\n        }}\n        style={newStyle}\n        className={`echarts-for-react ${className}`}\n      />\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}