{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harti\\\\denish-admin\\\\Frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 3002;\n\n// Connect to MongoDB (make sure MongoDB is running)\nconst mongoUrl = \"mongodb+srv://denish:Suhagiya%40321@cluster0.iuxj3rp.mongodb.net/\";\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true\n}).then(() => {\n  console.log(\"Connected to database\");\n}).catch(e => console.log(e));\n\n// Define MongoDB schema and model for student data\nconst studentSchema = new mongoose.Schema({\n  schoolName: String,\n  studentName: String,\n  studentClass: Number,\n  age: Number,\n  religion: String,\n  // Add religion field\n  caste: String,\n  schoolArea: String,\n  schoolDistrict: String,\n  gender: String,\n  // Add gender field\n  dropoutCategory: String,\n  // Add dropout category field\n  dropoutReason: String\n});\nconst Student = mongoose.model('Student', studentSchema);\napp.use(bodyParser.json());\napp.use(cors());\napp.post('/api/submitStudentData', async (req, res) => {\n  try {\n    const {\n      schoolName,\n      studentName,\n      studentClass,\n      age,\n      religion,\n      caste,\n      schoolArea,\n      schoolDistrict,\n      gender,\n      dropoutCategory,\n      dropoutReason\n    } = req.body;\n\n    // Create a new Student document\n    const student = new Student({\n      schoolName,\n      studentName,\n      studentClass,\n      age,\n      religion,\n      caste,\n      schoolArea,\n      schoolDistrict,\n      gender,\n      dropoutCategory,\n      dropoutReason\n    });\n\n    // Save the document to the MongoDB database\n    await student.save();\n\n    // Respond with a success message or the saved document\n    res.status(201).json(student);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","express","require","mongoose","bodyParser","cors","app","PORT","process","env","mongoUrl","connect","useNewUrlParser","then","console","log","catch","e","studentSchema","Schema","schoolName","String","studentName","studentClass","Number","age","religion","caste","schoolArea","schoolDistrict","gender","dropoutCategory","dropoutReason","Student","model","use","json","post","req","res","body","student","save","status","error","listen"],"sources":["C:/Users/harti/denish-admin/Frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = process.env.PORT || 3002;\n\n// Connect to MongoDB (make sure MongoDB is running)\nconst mongoUrl = \"mongodb+srv://denish:Suhagiya%40321@cluster0.iuxj3rp.mongodb.net/\";\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n})\n  .then(() => {\n    console.log(\"Connected to database\");\n  })\n  .catch(e => console.log(e));\n\n// Define MongoDB schema and model for student data\nconst studentSchema = new mongoose.Schema({\n  schoolName: String,\n  studentName: String,\n  studentClass: Number,\n  age: Number,\n  religion: String, // Add religion field\n  caste: String,\n  schoolArea: String,\n  schoolDistrict: String,\n  gender: String, // Add gender field\n  dropoutCategory: String, // Add dropout category field\n  dropoutReason: String,\n});\n\nconst Student = mongoose.model('Student', studentSchema);\n\napp.use(bodyParser.json());\napp.use(cors());\n\napp.post('/api/submitStudentData', async (req, res) => {\n  try {\n    const {\n      schoolName,\n      studentName,\n      studentClass,\n      age,\n      religion,\n      caste,\n      schoolArea,\n      schoolDistrict,\n      gender,\n      dropoutCategory,\n      dropoutReason,\n    } = req.body;\n\n    // Create a new Student document\n    const student = new Student({\n      schoolName,\n      studentName,\n      studentClass,\n      age,\n      religion,\n      caste,\n      schoolArea,\n      schoolDistrict,\n      gender,\n      dropoutCategory,\n      dropoutReason,\n    });\n\n    // Save the document to the MongoDB database\n    await student.save();\n\n    // Respond with a success message or the saved document\n    res.status(201).json(student);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,IAAI,GAAGL,QAAQ,CAACM,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTL,OAAA,CAACL,KAAK,CAACW,UAAU;EAAAC,QAAA,eACfP,OAAA,CAACH,GAAG;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACAb,eAAe,CAAC,CAAC;AACjB,MAAMc,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACA,MAAMG,QAAQ,GAAG,mEAAmE;AACpFP,QAAQ,CAACQ,OAAO,CAACD,QAAQ,EAAE;EACzBE,eAAe,EAAE;AACnB,CAAC,CAAC,CACCC,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;AACtC,CAAC,CAAC,CACDC,KAAK,CAACC,CAAC,IAAIH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC,CAAC;;AAE7B;AACA,MAAMC,aAAa,GAAG,IAAIf,QAAQ,CAACgB,MAAM,CAAC;EACxCC,UAAU,EAAEC,MAAM;EAClBC,WAAW,EAAED,MAAM;EACnBE,YAAY,EAAEC,MAAM;EACpBC,GAAG,EAAED,MAAM;EACXE,QAAQ,EAAEL,MAAM;EAAE;EAClBM,KAAK,EAAEN,MAAM;EACbO,UAAU,EAAEP,MAAM;EAClBQ,cAAc,EAAER,MAAM;EACtBS,MAAM,EAAET,MAAM;EAAE;EAChBU,eAAe,EAAEV,MAAM;EAAE;EACzBW,aAAa,EAAEX;AACjB,CAAC,CAAC;AAEF,MAAMY,OAAO,GAAG9B,QAAQ,CAAC+B,KAAK,CAAC,SAAS,EAAEhB,aAAa,CAAC;AAExDZ,GAAG,CAAC6B,GAAG,CAAC/B,UAAU,CAACgC,IAAI,CAAC,CAAC,CAAC;AAC1B9B,GAAG,CAAC6B,GAAG,CAAC9B,IAAI,CAAC,CAAC,CAAC;AAEfC,GAAG,CAAC+B,IAAI,CAAC,wBAAwB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrD,IAAI;IACF,MAAM;MACJnB,UAAU;MACVE,WAAW;MACXC,YAAY;MACZE,GAAG;MACHC,QAAQ;MACRC,KAAK;MACLC,UAAU;MACVC,cAAc;MACdC,MAAM;MACNC,eAAe;MACfC;IACF,CAAC,GAAGM,GAAG,CAACE,IAAI;;IAEZ;IACA,MAAMC,OAAO,GAAG,IAAIR,OAAO,CAAC;MAC1Bb,UAAU;MACVE,WAAW;MACXC,YAAY;MACZE,GAAG;MACHC,QAAQ;MACRC,KAAK;MACLC,UAAU;MACVC,cAAc;MACdC,MAAM;MACNC,eAAe;MACfC;IACF,CAAC,CAAC;;IAEF;IACA,MAAMS,OAAO,CAACC,IAAI,CAAC,CAAC;;IAEpB;IACAH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAACK,OAAO,CAAC;EAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd9B,OAAO,CAAC8B,KAAK,CAACA,KAAK,CAAC;IACpBL,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEQ,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;AAEFtC,GAAG,CAACuC,MAAM,CAACtC,IAAI,EAAE,MAAM;EACrBO,OAAO,CAACC,GAAG,CAAE,6BAA4BR,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}