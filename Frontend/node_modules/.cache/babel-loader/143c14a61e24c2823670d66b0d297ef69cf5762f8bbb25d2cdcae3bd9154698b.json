{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harti\\\\denish-admin\\\\Frontend\\\\src\\\\components\\\\ReligionPieChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReligionPieChart = () => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Fetch student data from the API\n    axios.get(\"http://localhost:3002/api/getStudentData\").then(response => {\n      const data = response.data;\n      if (!data || data.length === 0) {\n        console.warn(\"No data available.\");\n        setIsLoading(false);\n        return;\n      }\n\n      // Calculate data for the pie chart\n      const religionCounts = {};\n      data.forEach(student => {\n        const religion = student.religion || \"Unknown\";\n        religionCounts[religion] = (religionCounts[religion] || 0) + 1;\n      });\n      const chartData = [[\"Religion\", \"Number of Students\"]];\n      const totalStudents = data.length;\n      for (const religion in religionCounts) {\n        const count = religionCounts[religion];\n        const percentage = (count / totalStudents * 100).toFixed(2);\n        chartData.push([religion, count, `${percentage}%`]);\n      }\n      setChartData(chartData);\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Student Religion Distribution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Chart, {\n      chartType: \"PieChart\",\n      data: chartData,\n      options: {\n        title: \"Religion Distribution\",\n        pieHole: 0.4\n      },\n      width: \"100%\",\n      height: \"400px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ReligionPieChart, \"0VBiqXVfX1xERZ5exVlERmiVpMU=\");\n_c = ReligionPieChart;\nexport default ReligionPieChart;\nvar _c;\n$RefreshReg$(_c, \"ReligionPieChart\");","map":{"version":3,"names":["React","useEffect","useState","Chart","axios","jsxDEV","_jsxDEV","ReligionPieChart","_s","chartData","setChartData","isLoading","setIsLoading","get","then","response","data","length","console","warn","religionCounts","forEach","student","religion","totalStudents","count","percentage","toFixed","push","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","chartType","options","title","pieHole","width","height","_c","$RefreshReg$"],"sources":["C:/Users/harti/denish-admin/Frontend/src/components/ReligionPieChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport axios from \"axios\";\r\n\r\nconst ReligionPieChart = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch student data from the API\r\n    axios.get(\"http://localhost:3002/api/getStudentData\")\r\n      .then((response) => {\r\n        const data = response.data;\r\n\r\n        if (!data || data.length === 0) {\r\n          console.warn(\"No data available.\");\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Calculate data for the pie chart\r\n        const religionCounts = {};\r\n        data.forEach((student) => {\r\n          const religion = student.religion || \"Unknown\";\r\n          religionCounts[religion] = (religionCounts[religion] || 0) + 1;\r\n        });\r\n\r\n        const chartData = [[\"Religion\", \"Number of Students\"]];\r\n        const totalStudents = data.length;\r\n        for (const religion in religionCounts) {\r\n          const count = religionCounts[religion];\r\n          const percentage = ((count / totalStudents) * 100).toFixed(2);\r\n          chartData.push([religion, count, `${percentage}%`]);\r\n        }\r\n\r\n        setChartData(chartData);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Student Religion Distribution</h2>\r\n      {isLoading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <Chart\r\n          chartType=\"PieChart\"\r\n          data={chartData}\r\n          options={{\r\n            title: \"Religion Distribution\",\r\n            pieHole: 0.4,\r\n          }}\r\n          width={\"100%\"}\r\n          height={\"400px\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReligionPieChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}