import React from 'react';
import { EChartsReactProps } from 'echarts-for-react';
import { ECharts, EChartsOption, SeriesOption, XAXisComponentOption, YAXisComponentOption, TreeSeriesOption as TreeSeriesOption$1 } from 'echarts';
import { DatasetComponentOption, DataZoomComponentOption, LegendComponentOption, RadarComponentOption, TooltipComponentOption, VisualMapComponentOption } from 'echarts/components';
import { BarSeriesOption, FunnelSeriesOption, LineSeriesOption, MapSeriesOption, PieSeriesOption, RadarSeriesOption, SankeySeriesOption, ScatterSeriesOption, TreeSeriesOption, TreemapSeriesOption } from 'echarts/charts';
import * as echarts_types_dist_echarts from 'echarts/types/dist/echarts';

interface EChartsProps extends Omit<EChartsReactProps, 'option'> {
    height?: number;
    loading?: boolean;
    option?: EChartsOption;
    locale?: {
        emptyMessage?: React.ReactNode;
        loading?: React.ReactNode;
    };
    /**
     * Customize the placeholder when chart data is empty
     */
    renderEmptyPlaceholder?: () => React.ReactNode;
    children?: React.ReactNode;
}
interface ChartComponentProps<DataType = unknown[]> extends EChartsProps {
    name?: SeriesOption['name'];
    data?: DataType;
}
declare const _default$a: React.ForwardRefExoticComponent<EChartsProps & React.RefAttributes<ECharts>>;

declare type AxisLabelFormatter = (value: string | number) => string;
declare type OptionComponent<P> = React.ComponentType<P> & {
    tapEChartsOption(option: EChartsOption, props: P, context: {
        [key: string]: unknown;
        series: React.ReactElement[];
    }): any;
};

declare type DatasetProps = DatasetComponentOption;
declare const Dataset: OptionComponent<DatasetProps>;

declare type DataZoomProps = DataZoomComponentOption;
declare const DataZoom: OptionComponent<DataZoomProps>;

declare type LegendProps = LegendComponentOption;
declare const Legend: OptionComponent<LegendProps>;

declare type RadarProps = RadarComponentOption & {
    circle?: boolean;
};
declare const Radar: OptionComponent<RadarProps>;

declare type TooltipProps = TooltipComponentOption;
declare const Tooltip: OptionComponent<TooltipProps>;

declare type VisualMapProps = VisualMapComponentOption;
declare const VisualMap: OptionComponent<VisualMapProps>;

declare type XAxisProps = Omit<XAXisComponentOption, 'axisLine' | 'axisLabel' | 'splitLine'> & {
    axisLine?: XAXisComponentOption['axisLine'] | boolean;
    axisLabel?: XAXisComponentOption['axisLabel'] | boolean | AxisLabelFormatter;
    splitLine?: XAXisComponentOption['splitLine'] | boolean;
};
declare const XAxis: OptionComponent<XAxisProps>;

declare type YAxisProps = Omit<YAXisComponentOption, 'axisLine' | 'axisLabel' | 'splitLine'> & {
    axisLine?: YAXisComponentOption['axisLine'] | boolean;
    axisLabel?: YAXisComponentOption['axisLabel'] | boolean | AxisLabelFormatter;
    splitLine?: YAXisComponentOption['splitLine'] | boolean;
    /**
     * When nameLocation="middle",
     * whether to transpose the axis name text into vertical direction.
     *
     * @default false
     */
    transposeNameText?: boolean;
};
declare const YAxis: OptionComponent<YAxisProps>;

declare type BarsProps = Omit<BarSeriesOption, 'type' | 'stack'> & {
    color?: string | string[];
    stack?: string | true;
};
declare const Bars: OptionComponent<BarsProps>;

interface FunnelProps extends Omit<FunnelSeriesOption, 'type'> {
    asc?: boolean;
}
declare const Funnel: OptionComponent<FunnelProps>;

declare type LineProps = Omit<LineSeriesOption, 'type' | 'stack'> & {
    stack?: string | boolean;
    area?: boolean;
};
declare const Line: OptionComponent<LineProps>;

declare type MapProps = Omit<MapSeriesOption, 'type'>;
declare const Map: OptionComponent<MapProps>;

interface PieProps extends Omit<PieSeriesOption, 'type'> {
    donut?: boolean;
}
declare const Pie: OptionComponent<PieProps>;

declare type RadarLineProps = Omit<RadarSeriesOption, 'data'> & {
    data?: number[];
};
/**
 * TODO Consider deprecate this component as it can be only used within RadarChart
 */
declare const RadarLine: OptionComponent<RadarLineProps>;

declare type SankeyProps = SankeySeriesOption;
declare const Sankey: OptionComponent<SankeyProps>;

declare type ScatterProps = Omit<ScatterSeriesOption, 'type'>;
declare const Scatter: OptionComponent<ScatterProps>;

declare type TreeProps$1 = TreeSeriesOption;
declare const Tree: OptionComponent<TreeProps$1>;

declare type TreemapProps = TreemapSeriesOption;
declare const Treemap: OptionComponent<TreemapProps>;

interface BarChartProps extends ChartComponentProps<[category: string, ...values: number[]][]> {
    horizontal?: boolean;
    tooltip?: boolean;
    xAxis?: boolean;
    yAxis?: boolean;
    legend?: boolean;
}
declare const _default$9: React.ForwardRefExoticComponent<BarChartProps & React.RefAttributes<echarts_types_dist_echarts.ECharts>>;

interface FunnelChartProps extends ChartComponentProps<FunnelProps['data']> {
    asc?: boolean;
    tooltip?: boolean;
}
declare const _default$8: React.ForwardRefExoticComponent<FunnelChartProps & React.RefAttributes<echarts_types_dist_echarts.ECharts>>;

interface LineChartProps extends ChartComponentProps<[category: string, ...values: number[]][]> {
    tooltip?: boolean;
}
declare const _default$7: React.ForwardRefExoticComponent<LineChartProps & React.RefAttributes<echarts_types_dist_echarts.ECharts>>;

interface MapChartProps extends ChartComponentProps<MapProps['data']>, Omit<MapProps, 'color' | 'height' | 'id'> {
    visualMap?: boolean;
}
declare const _default$6: React.ForwardRefExoticComponent<MapChartProps & React.RefAttributes<echarts_types_dist_echarts.ECharts>>;

interface PieChartProps extends ChartComponentProps<PieProps['data']>, Omit<PieProps, 'height' | 'id' | 'color'> {
    legend?: boolean;
}
declare const _default$5: React.ForwardRefExoticComponent<PieChartProps & React.RefAttributes<echarts_types_dist_echarts.ECharts>>;

interface RadarChartProps extends ChartComponentProps<[name: string, max: number, ...values: number[]][]> {
    tooltip?: boolean;
    legend?: boolean;
}
declare const _default$4: React.ForwardRefExoticComponent<RadarChartProps & React.RefAttributes<ECharts>>;

interface SankeyChartProps extends ChartComponentProps<SankeyProps['data']> {
}
declare const _default$3: React.ForwardRefExoticComponent<SankeyChartProps & React.RefAttributes<ECharts>>;

interface ScatterChartProps extends ChartComponentProps<ScatterProps['data']> {
    tooltip?: boolean;
    legend?: boolean;
}
declare const _default$2: React.ForwardRefExoticComponent<ScatterChartProps & React.RefAttributes<ECharts>>;

declare type TreeProps = TreeSeriesOption$1;
interface TreeChartProps extends ChartComponentProps<TreeProps['data']> {
}
declare const _default$1: React.ForwardRefExoticComponent<TreeChartProps & React.RefAttributes<echarts_types_dist_echarts.ECharts>>;

interface TreemapChartProps extends ChartComponentProps<TreemapProps['data']> {
}
declare const _default: React.ForwardRefExoticComponent<TreemapChartProps & React.RefAttributes<ECharts>>;

export { _default$9 as BarChart, Bars, DataZoom, Dataset, Funnel, _default$8 as FunnelChart, Legend, Line, _default$7 as LineChart, Map, _default$6 as MapChart, Pie, _default$5 as PieChart, Radar, _default$4 as RadarChart, RadarLine, Sankey, _default$3 as SankeyChart, Scatter, _default$2 as ScatterChart, Tooltip, Tree, _default$1 as TreeChart, Treemap, _default as TreemapChart, VisualMap, XAxis, YAxis, _default$a as default };
