"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BarChart: () => BarChart_default,
  Bars: () => Bars_default,
  DataZoom: () => DataZoom_default,
  Dataset: () => Dataset_default,
  Funnel: () => Funnel_default,
  FunnelChart: () => FunnelChart_default,
  Legend: () => Legend_default,
  Line: () => Line_default,
  LineChart: () => LineChart_default,
  Map: () => Map_default,
  MapChart: () => MapChart_default,
  Pie: () => Pie_default,
  PieChart: () => PieChart_default,
  Radar: () => Radar_default,
  RadarChart: () => RadarChart_default,
  RadarLine: () => RadarLine_default,
  Sankey: () => Sankey_default,
  SankeyChart: () => SankeyChart_default,
  Scatter: () => Scatter_default,
  ScatterChart: () => ScatterChart_default,
  Tooltip: () => Tooltip_default,
  Tree: () => Tree_default,
  TreeChart: () => TreeChart_default,
  Treemap: () => Treemap_default,
  TreemapChart: () => TreemapChart_default,
  VisualMap: () => VisualMap_default,
  XAxis: () => XAxis_default,
  YAxis: () => YAxis_default,
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);

// src/ECharts.tsx
var import_react3 = __toESM(require("react"));
var import_lodash3 = __toESM(require("lodash.merge"));
var import_core = __toESM(require("echarts-for-react/lib/core"));
var echarts2 = __toESM(require("echarts/core"));
var import_renderers = require("echarts/renderers");

// src/utils.ts
var import_react2 = __toESM(require("react"));
var import_lodash = __toESM(require("lodash.merge"));
var import_lodash2 = __toESM(require("lodash.omit"));
var import_react_keyed_flatten_children = __toESM(require("react-keyed-flatten-children"));
var echarts = __toESM(require("echarts/core"));
var import_components = require("echarts/components");

// src/constants.ts
var import_react = __toESM(require("react"));
var EChartsContext = import_react.default.createContext({});
var symbols = {
  typeKey: Symbol.for("$$typeKey"),
  dataset: Symbol.for("$$dataset"),
  dataZoom: Symbol.for("$$dataZoom"),
  legend: Symbol.for("$$legend"),
  radar: Symbol.for("$$radar"),
  tooltip: Symbol.for("$$tooltip"),
  visualMap: Symbol.for("$$visualMap"),
  xAxis: Symbol.for("$$xAxis"),
  yAxis: Symbol.for("$$yAxis"),
  bars: Symbol.for("$$bars"),
  funnel: Symbol.for("$$funnel"),
  line: Symbol.for("$$line"),
  map: Symbol.for("$$map"),
  pie: Symbol.for("$$pie"),
  radarLine: Symbol.for("$$radarLine"),
  sankey: Symbol.for("$$sankey"),
  scatter: Symbol.for("$$scatter"),
  tree: Symbol.for("$$tree"),
  treemap: Symbol.for("$$treemap")
};
symbols.components = [
  symbols.dataZoom,
  symbols.legend,
  symbols.radar,
  symbols.tooltip,
  symbols.visualMap,
  symbols.xAxis,
  symbols.yAxis
];
symbols.series = [
  symbols.bars,
  symbols.funnel,
  symbols.line,
  symbols.map,
  symbols.pie,
  symbols.radarLine,
  symbols.sankey,
  symbols.scatter,
  symbols.tree,
  symbols.treemap
];

// src/utils.ts
echarts.use([import_components.TitleComponent]);
function is(element, name2) {
  return element.type[symbols.typeKey] === Symbol.for(`$$${name2}`);
}
function isSeries(element) {
  return symbols.series.includes(element.type[symbols.typeKey]);
}
function transformTextOption(option, defaultOption2) {
  if (option === void 0 || option === true) {
    return defaultOption2;
  }
  if (option === false) {
    return { show: false };
  }
  if (typeof option === "function") {
    return {
      ...defaultOption2,
      show: true,
      formatter: option
    };
  }
  if (typeof option === "object") {
    return (0, import_lodash.default)({
      ...defaultOption2,
      show: true
    }, option);
  }
  return {
    ...defaultOption2,
    show: true,
    formatter() {
      return option;
    }
  };
}
function randstr(length = 16) {
  let text = "";
  const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (let i = 0; i < length; i += 1) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return text;
}
function excludeEchartsProps(props) {
  return (0, import_lodash2.default)(props, ["option", "locale", "height", "loading"]);
}
function createEChartsOptionFromChildren(children, _) {
  const option = {};
  const validChildren = (0, import_react_keyed_flatten_children.default)(children).filter((child) => import_react2.default.isValidElement(child));
  const series = validChildren.filter((child) => {
    return symbols.series.includes(child.type[symbols.typeKey]);
  });
  const context = {
    ..._,
    series
  };
  validChildren.forEach((child) => {
    var _a, _b;
    (_b = (_a = child.type).tapEChartsOption) == null ? void 0 : _b.call(_a, option, excludeEchartsProps(child.props), context);
  });
  return option;
}
function isDataEmpty(option) {
  if (option.dataset) {
    return isDatasetEmpty(option.dataset);
  }
  return isSeriesEmpty(option.series);
}
function isDatasetEmpty(dataset) {
  if (!dataset.source) {
    return true;
  }
  if (Array.isArray(dataset.source)) {
    return dataset.source.length < 1;
  }
  return Object.getOwnPropertyNames(dataset.source).length < 1;
}
function isSeriesEmpty(series) {
  return !series || series.every((serie) => {
    if (serie.type === "sankey") {
      return (!serie.nodes || serie.nodes.length < 1) && (!serie.data || serie.data.length < 1);
    }
    return !serie.data || serie.data.length < 1;
  });
}

// src/ECharts.tsx
var themes = __toESM(require("echarts-theme-rsuite"));

// src/assets/chart-nodata.svg
var React3 = __toESM(require("react"));
var SvgChartNodata = (props) => /* @__PURE__ */ React3.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: 104,
  height: 46,
  viewBox: "0 0 104 46",
  ...props
}, /* @__PURE__ */ React3.createElement("g", {
  fill: "none",
  fillRule: "evenodd",
  opacity: 0.46
}, /* @__PURE__ */ React3.createElement("g", {
  fillRule: "nonzero",
  transform: "translate(60 10)"
}, /* @__PURE__ */ React3.createElement("path", {
  fill: "#E5E5EA",
  d: "M17,0 L40,0 C42.209139,0 44,1.790861 44,4 L44,32 C44,34.209139 42.209139,36 40,36 L4,36 C1.790861,36 0,34.209139 0,32 L0,30 L1,30 L1,32 C1,33.5976809 2.24891996,34.9036609 3.82372721,34.9949073 L4,35 L40,35 C41.5976809,35 42.9036609,33.75108 42.9949073,32.1762728 L43,32 L43,4 C43,2.40231912 41.75108,1.09633912 40.1762728,1.00509269 L40,1 L17,1 L17,0 Z"
}), /* @__PURE__ */ React3.createElement("path", {
  fill: "#C5C6C7",
  d: "M21,9 L21,27 L16.8737865,27.0007613 C16.9355797,26.7608745 16.9756782,26.5122749 16.9918654,26.2571791 L17,26 L16.9997865,9 L21,9 Z"
}), /* @__PURE__ */ React3.createElement("polygon", {
  fill: "#D9D9D9",
  points: "26 18 22 18 22 27 26 27"
}), /* @__PURE__ */ React3.createElement("polygon", {
  fill: "#E5E5EA",
  points: "32 23 27 23 27 27 32 27"
}), /* @__PURE__ */ React3.createElement("polygon", {
  fill: "#E5E5EA",
  points: "32 18 27 18 27 22 32 22"
}), /* @__PURE__ */ React3.createElement("polygon", {
  fill: "#D9D9D9",
  points: "32 9 22 9 22 17 32 17"
})), /* @__PURE__ */ React3.createElement("g", {
  fillRule: "nonzero",
  transform: "translate(0 10)"
}, /* @__PURE__ */ React3.createElement("path", {
  fill: "#E5E5EA",
  d: "M44,30 L44,32 C44,34.209139 42.209139,36 40,36 L4,36 C1.790861,36 0,34.209139 0,32 L0,4 C0,1.790861 1.790861,0 4,0 L27,0 L27,1 L4,1 C2.40231912,1 1.09633912,2.24891996 1.00509269,3.82372721 L1,4 L1,32 C1,33.5976809 2.24891996,34.9036609 3.82372721,34.9949073 L4,35 L40,35 C41.5976809,35 42.9036609,33.75108 42.9949073,32.1762728 L43,32 L43,30 L44,30 Z"
}), /* @__PURE__ */ React3.createElement("g", {
  transform: "matrix(-1 0 0 1 32 8)"
}, /* @__PURE__ */ React3.createElement("path", {
  fill: "#E5E5EA",
  d: "M7.49088855,0.317393442 L8.76101043,6.45950992 C7.29877139,6.97118377 6.25,8.36311505 6.25,10 C6.25,12.0710678 7.92893219,13.75 10,13.75 C11.5445601,13.75 12.8710193,12.8161995 13.4456235,11.4823526 L13.5300246,11.2684986 L19.6839139,12.5040464 C18.5724003,16.8150611 14.6581413,20 10,20 C8.15753882,20 6.4314569,19.5017211 4.94915868,18.6325678 C4.97172334,18.4951443 4.98679793,18.3554558 4.99434047,18.2138361 L5,18 L4.99993491,1.33785961 C5.68154258,0.943564009 6.41400922,0.62740983 7.18508527,0.401646632 L7.49088855,0.317393442 Z"
}), /* @__PURE__ */ React3.createElement("path", {
  fill: "#C5C6C7",
  d: "M10,0 C15.4186428,0 19.8306786,4.30979721 19.9952415,9.68852584 L20,10 L13.75,10 C13.75,8.0028989 12.18885,6.3704239 10.220341,6.25636587 L10,6.25 L10,0 Z"
}))), /* @__PURE__ */ React3.createElement("g", {
  transform: "translate(27)"
}, /* @__PURE__ */ React3.createElement("path", {
  fill: "#C5C6C7",
  fillRule: "nonzero",
  d: "M46,0 C48.209139,0 50,1.790861 50,4 L50,36 C50,38.209139 48.209139,40 46,40 L4,40 C1.790861,40 0,38.209139 0,36 L0,4 C0,1.790861 1.790861,0 4,0 L46,0 Z M46,1 L4,1 C2.40231912,1 1.09633912,2.24891996 1.00509269,3.82372721 L1,4 L1,36 C1,37.5976809 2.24891996,38.9036609 3.82372721,38.9949073 L4,39 L46,39 C47.5976809,39 48.9036609,37.75108 48.9949073,36.1762728 L49,36 L49,4 C49,2.40231912 47.75108,1.09633912 46.1762728,1.00509269 L46,1 Z"
}), /* @__PURE__ */ React3.createElement("g", {
  transform: "translate(13 8)"
}, /* @__PURE__ */ React3.createElement("rect", {
  width: 3,
  height: 9,
  x: 1,
  y: 15,
  fill: "#C5C6C7",
  rx: 0.752
}), /* @__PURE__ */ React3.createElement("rect", {
  width: 3,
  height: 8,
  x: 7,
  y: 16,
  fill: "#C5C6C7",
  rx: 0.752
}), /* @__PURE__ */ React3.createElement("rect", {
  width: 3,
  height: 12,
  x: 13,
  y: 12,
  fill: "#C5C6C7",
  rx: 0.752
}), /* @__PURE__ */ React3.createElement("rect", {
  width: 3,
  height: 15,
  x: 19,
  y: 9,
  fill: "#C5C6C7",
  rx: 0.752
}), /* @__PURE__ */ React3.createElement("path", {
  fill: "#A6A6A6",
  fillRule: "nonzero",
  d: "M15.1740335,0.269902413 C15.3523155,0.055964011 15.6312917,-0.0387293895 15.8973285,0.0145685364 L16.0287425,0.0536831948 L23.5287425,3.05368319 C23.9133301,3.20751825 24.1003921,3.64399608 23.946557,4.02858372 C23.8098148,4.3704394 23.4497498,4.55622538 23.1013153,4.48524744 L22.9716565,4.44639823 L15.9781995,1.64854071 L8.82636546,10.230179 C8.64808346,10.4441174 8.36910733,10.5388108 8.10307053,10.4855129 L7.9716565,10.4463982 L0.471656497,7.44639823 C0.0870688596,7.29256318 -0.0999930687,6.85608534 0.0538419864,6.47149771 C0.190584258,6.12964203 0.550649217,5.94385605 0.899083667,6.01483399 L1.02874251,6.05368319 L8.0221995,8.85004071 L15.1740335,0.269902413 Z"
})))));

// src/ECharts.tsx
echarts2.use([import_renderers.CanvasRenderer]);
echarts2.registerTheme("rsuite_light", themes.light);
echarts2.registerTheme("rsuite_dark", themes.dark);
var styles = {
  blockCenter: {
    width: "100%",
    height: "100%",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    color: "#8e8e93",
    fontSize: 14,
    fontWeight: "normal",
    lineHeight: "20px"
  },
  loaderWrap: {
    position: "absolute",
    top: 0,
    left: 0,
    backgroundColor: "rgba(255, 255, 255, 0.9)"
  }
};
var defaultOption = {
  grid: {
    containLabel: true
  }
};
function ECharts({
  height = 300,
  locale = {
    emptyMessage: "No data found",
    loading: "Loading..."
  },
  option = {},
  children,
  renderEmptyPlaceholder,
  ...props
}, ref) {
  const echartsRef = (0, import_react3.useRef)();
  (0, import_react3.useImperativeHandle)(ref, () => echartsRef.current);
  const context = (0, import_react3.useContext)(EChartsContext);
  const renderEmptyMessage = (0, import_react3.useCallback)(() => {
    if (typeof renderEmptyPlaceholder !== "undefined") {
      return renderEmptyPlaceholder();
    }
    return /* @__PURE__ */ import_react3.default.createElement("div", {
      className: "rs-echarts-body-info",
      style: styles.blockCenter
    }, /* @__PURE__ */ import_react3.default.createElement(SvgChartNodata, {
      style: { marginBottom: 10 }
    }), locale.emptyMessage);
  }, [renderEmptyPlaceholder, locale]);
  const renderLoader = (0, import_react3.useCallback)(() => {
    return /* @__PURE__ */ import_react3.default.createElement("div", {
      className: "rs-echarts-loader-wrap",
      style: { ...styles.blockCenter, ...styles.loaderWrap }
    }, locale.loading);
  }, [locale]);
  const onChartReady = (0, import_react3.useCallback)((echarts19) => {
    echartsRef.current = echarts19;
  }, []);
  const { className, style, loading, ...echartsForReactProps } = props;
  const echartsOption = (0, import_react3.useMemo)(() => {
    return children ? (0, import_lodash3.default)({}, defaultOption, option, createEChartsOptionFromChildren(children, context)) : option;
  }, [children, context, option]);
  const dataEmpty = isDataEmpty(echartsOption);
  return /* @__PURE__ */ import_react3.default.createElement("div", {
    className: `rs-echarts ${className || ""}`,
    style: { position: "relative", height, ...style }
  }, !loading && dataEmpty && renderEmptyMessage(), /* @__PURE__ */ import_react3.default.createElement(import_core.default, {
    echarts: echarts2,
    option: echartsOption,
    style: { height: "100%", visibility: dataEmpty ? "hidden" : "visible" },
    onChartReady,
    notMerge: true,
    theme: "rsuite_light",
    ...echartsForReactProps
  }), children, loading && renderLoader());
}
if (process.env.NODE_ENV !== "production") {
  ECharts.displayName = "ECharts";
}
var ECharts_default = import_react3.default.forwardRef(ECharts);

// src/components/Dataset.ts
var echarts3 = __toESM(require("echarts/core"));
var import_components2 = require("echarts/components");
var import_lodash4 = __toESM(require("lodash.merge"));
echarts3.use([import_components2.DatasetComponent]);
var Dataset = (_) => null;
Dataset[symbols.typeKey] = symbols.dataset;
Dataset.tapEChartsOption = (option, props) => {
  option.dataset = (0, import_lodash4.default)({}, props);
};
if (process.env.NODE_ENV !== "production") {
  Dataset.displayName = "Dataset";
}
var Dataset_default = Dataset;

// src/components/DataZoom.ts
var echarts4 = __toESM(require("echarts/core"));
var import_components3 = require("echarts/components");
var import_lodash5 = __toESM(require("lodash.merge"));
echarts4.use([import_components3.DataZoomComponent]);
var DataZoom = (_) => null;
DataZoom[symbols.typeKey] = symbols.dataZoom;
DataZoom.tapEChartsOption = (option, props) => {
  function getOption() {
    return (0, import_lodash5.default)({
      type: "slider"
    }, props);
  }
  const dataZoomOption = getOption();
  if (!option.dataZoom) {
    option.dataZoom = dataZoomOption;
  } else if (!Array.isArray(option.dataZoom)) {
    option.dataZoom = [option.dataZoom, dataZoomOption];
  } else {
    option.dataZoom.push(dataZoomOption);
  }
};
if (process.env.NODE_ENV !== "production") {
  DataZoom.displayName = "DataZoom";
}
var DataZoom_default = DataZoom;

// src/components/Legend.ts
var echarts5 = __toESM(require("echarts/core"));
var import_components4 = require("echarts/components");
var import_lodash6 = __toESM(require("lodash.merge"));
echarts5.use([import_components4.LegendComponent]);
var Legend = (_) => null;
Legend[symbols.typeKey] = symbols.legend;
Legend.tapEChartsOption = (option, props, context) => {
  function getOption() {
    const { chartType } = context;
    const legendOption2 = {
      show: true,
      bottom: 10
    };
    if (chartType === "pie") {
      legendOption2.icon = "circle";
    }
    return (0, import_lodash6.default)(legendOption2, props);
  }
  const legendOption = getOption();
  if (!option.legend) {
    option.legend = legendOption;
  } else if (!Array.isArray(option.legend)) {
    option.legend = [option.legend, legendOption];
  } else {
    option.legend.push(legendOption);
  }
};
if (process.env.NODE_ENV !== "production") {
  Legend.displayName = "Legend";
}
var Legend_default = Legend;

// src/components/Radar.ts
var echarts6 = __toESM(require("echarts/core"));
var import_components5 = require("echarts/components");
var import_lodash7 = __toESM(require("lodash.merge"));
echarts6.use([import_components5.RadarComponent]);
var Radar = () => null;
Radar[symbols.typeKey] = symbols.radar;
Radar.tapEChartsOption = (option, props) => {
  function getOption() {
    const { circle = false, ...rest } = props;
    return (0, import_lodash7.default)({
      axisName: {
        color: "#575757"
      },
      axisNameGap: 10,
      shape: circle ? "circle" : "polygon",
      splitArea: {
        areaStyle: {
          color: ["#FFFFFF", "#F7F7FA"]
        }
      }
    }, rest);
  }
  const radarOption = getOption();
  if (!option.radar) {
    option.radar = radarOption;
  } else if (!Array.isArray(option.radar)) {
    option.radar = [option.radar, radarOption];
  } else {
    option.radar.push(radarOption);
  }
};
if (process.env.NODE_ENV !== "production") {
  Radar.displayName = "Radar";
}
var Radar_default = Radar;

// src/components/Tooltip.ts
var echarts7 = __toESM(require("echarts/core"));
var import_components6 = require("echarts/components");
var import_lodash8 = __toESM(require("lodash.merge"));
echarts7.use([import_components6.TooltipComponent]);
var Tooltip = (_) => null;
Tooltip[symbols.typeKey] = symbols.tooltip;
Tooltip.tapEChartsOption = (option, props, context) => {
  function getOption() {
    const { chartType, series } = context;
    const hasAxis = chartType === "bar" || chartType === "line" || !!series.find((comp) => comp.type[symbols.typeKey] === symbols.xAxis || comp.type[symbols.typeKey] === symbols.yAxis);
    return (0, import_lodash8.default)({
      show: true,
      trigger: hasAxis ? "axis" : "item",
      axisPointer: {
        type: "none"
      }
    }, props);
  }
  option.tooltip = getOption();
};
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
var Tooltip_default = Tooltip;

// src/components/VisualMap.ts
var echarts8 = __toESM(require("echarts/core"));
var import_components7 = require("echarts/components");
var import_lodash9 = __toESM(require("lodash.merge"));
echarts8.use([import_components7.VisualMapComponent]);
var VisualMap = (_) => null;
VisualMap[symbols.typeKey] = symbols.visualMap;
VisualMap.tapEChartsOption = (option, props, context) => {
  function getComponentOption() {
    const { type = "continuous", ...rest } = props;
    const { chartData } = context;
    let inRange = {
      colorHue: [198, 199],
      colorSaturation: [1, 1],
      colorLightness: [0.88, 0.451]
    };
    if (type === "piecewise") {
      inRange = {
        symbol: "rect"
      };
    }
    const visualMapOption = (0, import_lodash9.default)({
      type,
      left: 0,
      bottom: 0,
      text: ["\u6700\u5927\u503C", "\u6700\u5C0F\u503C"],
      textGap: 5,
      orient: "horizontal",
      inverse: true,
      min: 0,
      itemGap: 1,
      symbolSize: [18, 14],
      textStyle: {
        color: "#8e8e93"
      },
      inRange
    }, rest);
    if (chartData && chartData.length > 0 && !visualMapOption.max) {
      visualMapOption.max = chartData.reduce((max, d) => Math.max(max, d[1]), -Infinity);
    }
    return visualMapOption;
  }
  option.visualMap = getComponentOption();
};
if (process.env.NODE_ENV !== "production") {
  VisualMap.displayName = "VisualMap";
}
var VisualMap_default = VisualMap;

// src/components/XAxis.ts
var import_lodash10 = __toESM(require("lodash.merge"));
var XAxis = () => null;
XAxis[symbols.typeKey] = symbols.xAxis;
XAxis.tapEChartsOption = (option, props, context) => {
  function getOption() {
    const { axisLabel, axisLine, splitLine, ...rest } = props;
    const { series } = context;
    return (0, import_lodash10.default)(rest.type === "category" ? {
      boundaryGap: !!series.find((comp) => comp.type[symbols.typeKey] === symbols.bars)
    } : {}, {
      nameTextStyle: {
        fontSize: 12,
        color: "#575757"
      }
    }, axisLabel ? {
      axisLabel: transformTextOption(axisLabel)
    } : {}, typeof axisLine === "boolean" ? {
      axisLine: {
        show: axisLine
      }
    } : axisLine, typeof splitLine === "boolean" ? {
      splitLine: {
        show: splitLine
      }
    } : splitLine, rest);
  }
  const xAxisOption = getOption();
  if (!option.xAxis) {
    option.xAxis = xAxisOption;
  } else if (!Array.isArray(option.xAxis)) {
    option.xAxis = [option.xAxis, xAxisOption];
  } else {
    option.xAxis.push(xAxisOption);
  }
};
if (process.env.NODE_ENV !== "production") {
  XAxis.displayName = "XAxis";
}
var XAxis_default = XAxis;

// src/components/YAxis.ts
var import_lodash11 = __toESM(require("lodash.merge"));
var YAxis = (_) => null;
YAxis.defaultProps = {
  show: true,
  type: "value"
};
YAxis[symbols.typeKey] = symbols.yAxis;
YAxis.tapEChartsOption = (option, props) => {
  function getOption() {
    const { name: name2, axisLabel, axisLine, splitLine, transposeNameText = false, ...rest } = props;
    return (0, import_lodash11.default)({
      name: name2,
      nameTextStyle: {
        fontSize: 12,
        color: "#575757"
      }
    }, name2 && rest.nameLocation === "middle" && transposeNameText ? {
      nameRotate: 0,
      name: name2.split("").join("\n")
    } : {}, typeof axisLine === "boolean" ? {
      axisLine: {
        show: axisLine
      }
    } : axisLine, typeof splitLine !== "undefined" ? {
      splitLine: (0, import_lodash11.default)({
        show: !!splitLine
      }, typeof splitLine !== "boolean" && splitLine)
    } : {}, axisLabel ? {
      axisLabel: transformTextOption(axisLabel)
    } : {}, rest);
  }
  const yAxisOption = getOption();
  if (!option.yAxis) {
    option.yAxis = yAxisOption;
  } else if (!Array.isArray(option.yAxis)) {
    option.yAxis = [option.yAxis, yAxisOption];
  } else {
    option.yAxis.push(yAxisOption);
  }
};
if (process.env.NODE_ENV !== "production") {
  YAxis.displayName = "YAxis";
}
var YAxis_default = YAxis;

// src/series/Bars.ts
var echarts9 = __toESM(require("echarts/core"));
var import_charts = require("echarts/charts");
var import_lodash12 = __toESM(require("lodash.merge"));
echarts9.use([import_charts.BarChart]);
var Bars = () => null;
var defaultBarsStackKey = randstr();
Bars[symbols.typeKey] = symbols.bars;
Bars.tapEChartsOption = (option, props, context) => {
  function getSeriesOption() {
    const { stack, color, label, ...rest } = props;
    const { chartType, horizontal, series } = context;
    const barsSeriesCount = series.filter((comp) => comp.type[symbols.typeKey] === symbols.bars).length;
    const stackedBars = stack ? series.filter((comp) => comp.type[symbols.typeKey] === symbols.bars && comp.props.stack === stack) : [];
    const stacked = stackedBars.length > 1;
    const stackTop = stackedBars.findIndex((comp) => comp.type[symbols.typeKey] === symbols.bars && comp.props.name === rest.name) === stackedBars.length - 1;
    let borderRadius;
    if (stacked && !stackTop) {
      borderRadius = 0;
    } else {
      borderRadius = chartType === "bar" && horizontal ? [0, 5, 5, 0] : [5, 5, 0, 0];
    }
    return (0, import_lodash12.default)({
      type: "bar",
      barWidth: (!stack && barsSeriesCount) > 1 ? 6 : 20,
      stack: typeof stack === "boolean" ? defaultBarsStackKey : stack,
      itemStyle: {
        color: Array.isArray(color) ? ({ dataIndex }) => color[dataIndex] : color,
        borderRadius
      },
      label: transformTextOption(label, {
        position: horizontal ? "right" : "top"
      })
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Bars.displayName = "Bars";
}
var Bars_default = Bars;

// src/series/Funnel.ts
var echarts10 = __toESM(require("echarts/core"));
var import_charts2 = require("echarts/charts");
var import_lodash13 = __toESM(require("lodash.merge"));
echarts10.use([import_charts2.FunnelChart]);
var Funnel = (_) => null;
Funnel.defaultProps = {
  asc: false
};
Funnel[symbols.typeKey] = symbols.funnel;
Funnel.tapEChartsOption = (option, props) => {
  function getSeriesOption() {
    const { data, asc, sort = asc ? "ascending" : "descending", label, ...rest } = props;
    return (0, import_lodash13.default)({
      type: "funnel",
      data: data == null ? void 0 : data.map(([name2, value]) => ({
        name: name2,
        value
      })).sort((d1, d2) => d2.value - d1.value),
      sort,
      label: transformTextOption(label, {
        show: true,
        position: "inside",
        formatter: ({ value }) => value,
        fontSize: 14
      })
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Funnel.displayName = "Funnel";
}
var Funnel_default = Funnel;

// src/series/Line.ts
var echarts11 = __toESM(require("echarts/core"));
var import_charts3 = require("echarts/charts");
var import_lodash14 = __toESM(require("lodash.merge"));
echarts11.use([import_charts3.LineChart]);
var Line = (_) => null;
Line[symbols.typeKey] = symbols.line;
var defaultLineStackKey = randstr();
Line.tapEChartsOption = (option, props) => {
  function getSeriesOption() {
    const { stack, area, ...rest } = props;
    return (0, import_lodash14.default)({
      type: "line",
      symbol: "none",
      stack: typeof stack === "boolean" ? defaultLineStackKey : stack,
      areaStyle: area && { opacity: stack ? 0.6 : 0.2 }
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Line.displayName = "Line";
}
var Line_default = Line;

// src/series/Map.ts
var echarts12 = __toESM(require("echarts/core"));
var import_charts4 = require("echarts/charts");
var import_lodash15 = __toESM(require("lodash.merge"));
echarts12.use([import_charts4.MapChart]);
var Map = (_) => null;
Map[symbols.typeKey] = symbols.map;
Map.tapEChartsOption = (option, props) => {
  function getSeriesOption() {
    const { map, name: name2, data, nameMap, ...rest } = props;
    return (0, import_lodash15.default)({
      type: "map",
      map,
      name: name2,
      data: data == null ? void 0 : data.map(([name3, value]) => ({
        name: nameMap && nameMap[name3] || name3,
        value
      })),
      itemStyle: {
        areaColor: "#E5E5EA",
        borderColor: "#ffffff",
        borderWidth: 1
      },
      label: {
        fontSize: 10
      },
      emphasis: {
        label: {
          color: "rgb(131, 56, 236)"
        },
        itemStyle: {
          areaColor: "rgba(131, 56, 236, .3)",
          borderColor: "rgb(131, 56, 236)"
        }
      },
      nameMap
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Map.displayName = "Map";
}
var Map_default = Map;

// src/series/Pie.ts
var echarts13 = __toESM(require("echarts/core"));
var import_charts5 = require("echarts/charts");
var import_lodash16 = __toESM(require("lodash.merge"));
echarts13.use([import_charts5.PieChart]);
var Pie = (_) => null;
Pie.defaultProps = {
  data: [],
  donut: false
};
Pie[symbols.typeKey] = symbols.pie;
Pie.tapEChartsOption = (option, props) => {
  function getSeriesOption() {
    const { radius, donut, label, ...rest } = props;
    const pieOption = (0, import_lodash16.default)({
      type: "pie",
      radius: composeRadiusOption(radius, donut),
      center: ["50%", "50%"]
    }, rest);
    if (label !== void 0) {
      pieOption.label = transformTextOption(label);
    }
    return pieOption;
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Pie.displayName = "Pie";
}
var Pie_default = Pie;
function composeRadiusOption(radiusProp, donutProp) {
  if (Array.isArray(radiusProp))
    return radiusProp;
  let outerRadius = 80;
  if (typeof radiusProp === "string") {
    outerRadius = parseFloat(radiusProp) || 80;
  } else if (typeof radiusProp === "number") {
    outerRadius = radiusProp;
  }
  const innerRadius = outerRadius - 15;
  return donutProp ? [`${innerRadius}%`, `${outerRadius}%`] : `${outerRadius}%`;
}

// src/series/RadarLine.ts
var echarts14 = __toESM(require("echarts/core"));
var import_charts6 = require("echarts/charts");
echarts14.use([import_charts6.RadarChart]);
var RadarLine = (_) => null;
RadarLine[symbols.typeKey] = symbols.radarLine;
RadarLine.tapEChartsOption = (option, props) => {
  var _a;
  const { name: name2, data } = props;
  if (!option.series) {
    option.series = [];
  }
  let radarSerieOption = (_a = option.series) == null ? void 0 : _a.find((series) => series.type === "radar");
  if (!radarSerieOption) {
    radarSerieOption = {
      type: "radar",
      symbol: "none",
      lineStyle: {
        width: 2
      },
      emphasis: {
        lineStyle: {
          width: 3
        },
        areaStyle: {
          opacity: 0.2
        }
      },
      data: []
    };
    option.series.push(radarSerieOption);
  }
  if (!radarSerieOption.data) {
    radarSerieOption.data = [];
  }
  radarSerieOption.data.push({
    name: name2,
    value: data
  });
};
if (process.env.NODE_ENV !== "production") {
  RadarLine.displayName = "RadarLine";
}
var RadarLine_default = RadarLine;

// src/series/Sankey.ts
var echarts15 = __toESM(require("echarts/core"));
var import_charts7 = require("echarts/charts");
var import_lodash17 = __toESM(require("lodash.merge"));
echarts15.use([import_charts7.SankeyChart]);
var Sankey = (_) => null;
Sankey[symbols.typeKey] = symbols.sankey;
Sankey.tapEChartsOption = (option, props) => {
  function getSeriesOption() {
    return (0, import_lodash17.default)({
      type: "sankey",
      nodeWidth: 30,
      nodeGap: 20,
      itemStyle: {
        borderWidth: 0
      },
      lineStyle: {
        color: "#cfcfcf",
        curveness: 0.5
      }
    }, props);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Sankey.displayName = "Sankey";
}
var Sankey_default = Sankey;

// src/series/Scatter.ts
var echarts16 = __toESM(require("echarts/core"));
var import_charts8 = require("echarts/charts");
var import_lodash18 = __toESM(require("lodash.merge"));
echarts16.use([import_charts8.ScatterChart]);
var Scatter = (_) => null;
Scatter[symbols.typeKey] = symbols.scatter;
Scatter.tapEChartsOption = (option, props, context) => {
  function getSeriesOption() {
    const { ...rest } = props;
    const { chartType } = context;
    return (0, import_lodash18.default)({
      type: "scatter",
      symbol: chartType === "bar" ? "emptyCircle" : "circle",
      symbolSize: 9,
      itemStyle: {
        opacity: chartType === "bar" ? 1 : 0.7
      },
      emphasis: {
        itemStyle: {
          opacity: 1
        }
      }
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Scatter.displayName = "Scatter";
}
var Scatter_default = Scatter;

// src/series/Tree.ts
var echarts17 = __toESM(require("echarts/core"));
var import_charts9 = require("echarts/charts");
var import_lodash19 = __toESM(require("lodash.merge"));
echarts17.use([import_charts9.TreeChart]);
var Tree = (_) => null;
Tree.defaultProps = {
  data: []
};
Tree[symbols.typeKey] = symbols.tree;
Tree.tapEChartsOption = (option, props) => {
  function getSeriesOption() {
    const { name: name2, data, ...rest } = props;
    return (0, import_lodash19.default)({
      type: "tree",
      name: name2,
      data,
      symbolSize: 8,
      itemStyle: {
        color: "#34c3ff",
        borderColor: "#34c3ff",
        borderWidth: 2
      },
      label: {
        position: "left",
        verticalAlign: "middle",
        align: "right"
      },
      leaves: {
        label: {
          position: "right",
          verticalAlign: "middle",
          align: "left"
        }
      }
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Tree.displayName = "Tree";
}
var Tree_default = Tree;

// src/series/Treemap.ts
var echarts18 = __toESM(require("echarts/core"));
var import_charts10 = require("echarts/charts");
var import_lodash20 = __toESM(require("lodash.merge"));
echarts18.use([import_charts10.TreemapChart]);
var Treemap = () => null;
Treemap.defaultProps = {
  data: []
};
Treemap[symbols.typeKey] = symbols.treemap;
Treemap.tapEChartsOption = (option, props) => {
  function transformData(node) {
    if (!node) {
      return node;
    }
    if (!Array.isArray(node)) {
      return node;
    }
    const [name2, value, children] = node;
    return {
      name: name2,
      value,
      children: children && children.map(transformData)
    };
  }
  function getSeriesOption() {
    const { data, ...rest } = props;
    return (0, import_lodash20.default)({
      type: "treemap",
      data: data == null ? void 0 : data.map(transformData),
      itemStyle: {
        areaColor: "#BEDBED",
        borderColor: "#ffffff",
        borderWidth: 1
      },
      visibleMin: 300,
      leafDepth: 1,
      drillDownIcon: null,
      label: {
        position: "insideTopLeft",
        color: "#ffffff",
        fontSize: 12,
        lineHeight: 17,
        formatter({ name: name2, value }) {
          return `{a|${name2}
${value}}`;
        },
        rich: {
          a: {
            color: "#ffffff",
            fontSize: 12,
            lineHeight: 17
          }
        }
      },
      levels: [
        {
          itemStyle: {
            borderColor: "#fff",
            borderWidth: 1,
            gapWidth: 1
          }
        }
      ]
    }, rest);
  }
  if (!option.series) {
    option.series = [];
  }
  option.series.push(getSeriesOption());
};
if (process.env.NODE_ENV !== "production") {
  Treemap.displayName = "Treemap";
}
var Treemap_default = Treemap;

// src/charts/BarChart.tsx
var import_react4 = __toESM(require("react"));
var categoryAxisProps = {
  type: "category",
  splitLine: false
};
var valueAxisProps = {
  type: "value"
};
function BarChart2({
  name: name2,
  data: inputData = [],
  tooltip = true,
  xAxis = true,
  yAxis = true,
  horizontal = false,
  legend = true,
  children,
  ...props
}, ref) {
  function renderDefaultCategoryAxis() {
    const data2 = horizontal ? [...inputData].reverse() : inputData;
    const categories = data2.map(([category]) => category);
    return horizontal ? /* @__PURE__ */ import_react4.default.createElement(YAxis_default, {
      ...categoryAxisProps,
      data: categories
    }) : /* @__PURE__ */ import_react4.default.createElement(XAxis_default, {
      ...categoryAxisProps,
      data: categories
    });
  }
  function renderDefaultValueAxis() {
    return horizontal ? /* @__PURE__ */ import_react4.default.createElement(XAxis_default, {
      ...valueAxisProps,
      show: xAxis
    }) : /* @__PURE__ */ import_react4.default.createElement(YAxis_default, {
      ...valueAxisProps,
      show: yAxis
    });
  }
  function renderDefaultSeries() {
    const data2 = horizontal ? [...inputData].reverse() : inputData;
    const values = data2.map((d) => d[1]);
    return /* @__PURE__ */ import_react4.default.createElement(Bars_default, {
      name: name2,
      data: values
    });
  }
  const components = import_react4.Children.toArray(children);
  const series = components.filter(isSeries);
  const data = horizontal ? [...inputData].reverse() : inputData;
  const categoryAxis = horizontal ? components.find((comp) => is(comp, "yAxis")) : components.find((comp) => is(comp, "xAxis"));
  const valueAxis = horizontal ? components.find((comp) => is(comp, "xAxis")) : components.find((comp) => is(comp, "yAxis"));
  return /* @__PURE__ */ import_react4.default.createElement(EChartsContext.Provider, {
    value: { chartType: "bar", horizontal }
  }, /* @__PURE__ */ import_react4.default.createElement(ECharts_default, {
    ref,
    ...props
  }, !categoryAxis && renderDefaultCategoryAxis(), !valueAxis && renderDefaultValueAxis(), !components.find((comp) => is(comp, "bars")) && renderDefaultSeries(), legend && !components.find((comp) => is(comp, "legend")) && /* @__PURE__ */ import_react4.default.createElement(Legend_default, null), tooltip && /* @__PURE__ */ import_react4.default.createElement(Tooltip_default, null), components.map((child) => {
    if (child.type === (horizontal ? YAxis_default : XAxis_default)) {
      return (0, import_react4.cloneElement)(child, {
        ...categoryAxisProps,
        data: child.props.data || data.map(([category]) => category)
      });
    }
    if (child.type === (horizontal ? XAxis_default : YAxis_default)) {
      return (0, import_react4.cloneElement)(child, valueAxisProps);
    }
    if (data.length && isSeries(child) && !child.props.data) {
      const serieIndex = series.indexOf(child);
      return (0, import_react4.cloneElement)(child, { data: data.map((d) => d[serieIndex + 1]) });
    }
    return child;
  })));
}
var BarChart_default = import_react4.default.forwardRef(BarChart2);

// src/charts/FunnelChart.tsx
var import_react5 = __toESM(require("react"));
var import_lodash21 = __toESM(require("lodash.merge"));
var funnelDefaultWidth = 40;
function FunnelChart2({ asc = false, tooltip = true, name: name2, data = [], children, option, ...props }, ref) {
  const components = import_react5.Children.toArray(children);
  const funnels = components.filter((comp) => is(comp, "funnel"));
  const legends = components.filter((comp) => is(comp, "legend"));
  const withoutLegend = legends.length === 0;
  function renderDefaultFunnel() {
    const funnelPosition = {
      width: `${funnelDefaultWidth}%`,
      left: `${(100 - funnelDefaultWidth) / 2}%`
    };
    return /* @__PURE__ */ import_react5.default.createElement(import_react5.Fragment, null, /* @__PURE__ */ import_react5.default.createElement(Funnel_default, {
      name: name2,
      data,
      asc,
      ...funnelPosition
    }), withoutLegend && /* @__PURE__ */ import_react5.default.createElement(Legend_default, {
      data: data.map(([name3]) => name3)
    }));
  }
  function renderFunnels(funnels2) {
    if (funnels2.length === 1) {
      const funnelPosition = {
        width: `${funnelDefaultWidth}%`,
        left: `${(100 - funnelDefaultWidth) / 2}%`
      };
      return funnels2.map((funnel, index) => /* @__PURE__ */ import_react5.default.createElement(import_react5.Fragment, {
        key: index
      }, (0, import_react5.cloneElement)(funnel, { ...funnelPosition, ...funnel.props }), withoutLegend && /* @__PURE__ */ import_react5.default.createElement(Legend_default, {
        data: funnel.props.data.map(([name3]) => name3)
      })));
    }
    const occupiedColorsCount = (index) => funnels2.slice(0, index).reduce((sum, funnel) => sum + funnel.props.data.length, 0);
    if (funnels2.length === 2) {
      return funnels2.map((funnel, index) => {
        const funnelPosition = {
          width: `${funnelDefaultWidth}%`,
          left: `${5 + 50 * index}%`
        };
        return /* @__PURE__ */ import_react5.default.createElement(import_react5.Fragment, {
          key: index
        }, (0, import_react5.cloneElement)(funnel, {
          ...funnelPosition,
          color: funnel.props.color && new Array(occupiedColorsCount(index)).concat(funnel.props.color),
          ...funnel.props
        }), withoutLegend && /* @__PURE__ */ import_react5.default.createElement(Legend_default, {
          data: funnel.props.data.map(([name3]) => name3),
          ...funnelPosition
        }));
      });
    }
    return funnels2.map((funnel, index) => /* @__PURE__ */ import_react5.default.createElement(import_react5.Fragment, {
      key: index
    }, (0, import_react5.cloneElement)(funnel, {
      color: funnel.props.color && new Array(occupiedColorsCount(index)).concat(funnel.props.color)
    }), withoutLegend && /* @__PURE__ */ import_react5.default.createElement(Legend_default, {
      data: funnel.props.data.map(([name3]) => name3)
    })));
  }
  let titleOption = {};
  if (!funnels.length) {
    titleOption = {
      title: {
        text: name2,
        left: "50%",
        top: "10%",
        textAlign: "center",
        textVerticalAlign: "bottom",
        textStyle: { color: "#272c36", fontSize: 14, fontWeight: "normal" }
      }
    };
  }
  if (funnels.length <= 2) {
    titleOption = {
      title: funnels.map((funnel, index) => ({
        text: funnel.props.name,
        left: `${funnels.length === 1 ? 50 : 5 + funnelDefaultWidth / 2 + index * 50}%`,
        top: "10%",
        textAlign: "center",
        textVerticalAlign: "bottom",
        textStyle: { color: "#272c36", fontSize: 14, fontWeight: "normal" }
      }))
    };
  }
  return /* @__PURE__ */ import_react5.default.createElement(EChartsContext.Provider, {
    value: { chartType: "funnel", dataName: name2 }
  }, /* @__PURE__ */ import_react5.default.createElement(ECharts_default, {
    ref,
    option: (0, import_lodash21.default)(titleOption, option),
    ...props
  }, !funnels.length && renderDefaultFunnel(), funnels.length > 0 && renderFunnels(funnels), tooltip && /* @__PURE__ */ import_react5.default.createElement(Tooltip_default, null), components.filter((comp) => !is(comp, "funnel"))));
}
var FunnelChart_default = import_react5.default.forwardRef(FunnelChart2);

// src/charts/LineChart.tsx
var import_react6 = __toESM(require("react"));
function LineChart2({ name: name2, data = [], tooltip = true, children, ...props }, ref) {
  function renderDefaultXAxis() {
    return /* @__PURE__ */ import_react6.default.createElement(XAxis_default, {
      ...{ data: data.map(([category]) => category) }
    });
  }
  function renderDefaultLine() {
    return /* @__PURE__ */ import_react6.default.createElement(Line_default, {
      name: name2,
      data: data.map((d) => d[1])
    });
  }
  const components = import_react6.Children.toArray(children);
  const series = components.filter(isSeries);
  return /* @__PURE__ */ import_react6.default.createElement(EChartsContext.Provider, {
    value: { chartType: "line" }
  }, /* @__PURE__ */ import_react6.default.createElement(ECharts_default, {
    ref,
    ...props
  }, !components.find((comp) => is(comp, "xAxis")) && renderDefaultXAxis(), !components.find((comp) => is(comp, "yAxis")) && /* @__PURE__ */ import_react6.default.createElement(YAxis_default, null), !components.find((comp) => is(comp, "line")) && renderDefaultLine(), tooltip && /* @__PURE__ */ import_react6.default.createElement(Tooltip_default, null), !components.find((comp) => is(comp, "legend")) && /* @__PURE__ */ import_react6.default.createElement(Legend_default, null), components.map((child) => {
    if (data.length && isSeries(child) && !child.props.data) {
      const serieIndex = series.indexOf(child);
      return (0, import_react6.cloneElement)(child, { data: data.map((d) => d[serieIndex + 1]) });
    }
    return child;
  })));
}
var LineChart_default = import_react6.default.forwardRef(LineChart2);

// src/charts/MapChart.tsx
var import_react7 = __toESM(require("react"));
var import_lodash22 = __toESM(require("lodash.merge"));
var mapVisualMapColors = [
  "rgb(8, 132, 204)",
  "rgba(8, 132, 204, .8)",
  "rgba(8, 132, 204, .6)",
  "rgba(8, 132, 204, .4)",
  "rgba(8, 132, 204, .3)"
];
function MapChart2({ name: name2, data = [], visualMap: shouldShowVisualMap = true, children, ...props }, ref) {
  function renderDefaultMap() {
    return /* @__PURE__ */ import_react7.default.createElement(Map_default, {
      name: name2,
      data,
      ...props
    });
  }
  const components = import_react7.Children.toArray(children);
  const compVisualMap = components.find((comp) => is(comp, "visualMap"));
  const visualMapProps = {
    show: shouldShowVisualMap !== false,
    type: "piecewise",
    inRange: {
      color: [...mapVisualMapColors].reverse()
    },
    controller: {
      symbol: "rect"
    }
  };
  const map = components.find((comp) => is(comp, "map"));
  return /* @__PURE__ */ import_react7.default.createElement(EChartsContext.Provider, {
    value: { chartType: "map", dataName: name2, chartData: data }
  }, /* @__PURE__ */ import_react7.default.createElement(ECharts_default, {
    ref,
    ...props
  }, /* @__PURE__ */ import_react7.default.createElement(Tooltip_default, null), !compVisualMap && /* @__PURE__ */ import_react7.default.createElement(VisualMap_default, {
    ...visualMapProps
  }), !map && renderDefaultMap(), components.map((child) => {
    if (child.type === VisualMap_default) {
      return import_react7.default.cloneElement(child, (0, import_lodash22.default)(visualMapProps, child.props));
    }
    return child;
  })));
}
var MapChart_default = import_react7.default.forwardRef(MapChart2);

// src/charts/PieChart.tsx
var import_react8 = __toESM(require("react"));
function PieChart2({ data = [], legend = true, children, ...props }, ref) {
  const components = import_react8.Children.toArray(children);
  function getPieData() {
    return data.map(([name2, value]) => ({ name: name2, value }));
  }
  return /* @__PURE__ */ import_react8.default.createElement(EChartsContext.Provider, {
    value: { chartType: "pie" }
  }, /* @__PURE__ */ import_react8.default.createElement(ECharts_default, {
    ref,
    ...props
  }, legend === true && !components.some((comp) => is(comp, "legend")) && /* @__PURE__ */ import_react8.default.createElement(Legend_default, null), !components.some((comp) => is(comp, "tooltip")) && /* @__PURE__ */ import_react8.default.createElement(Tooltip_default, null), !components.some((comp) => is(comp, "pie")) && /* @__PURE__ */ import_react8.default.createElement(Pie_default, {
    data: getPieData(),
    ...props
  }), children));
}
var PieChart_default = import_react8.default.forwardRef(PieChart2);

// src/charts/RadarChart.tsx
var import_react9 = __toESM(require("react"));
function RadarChart2({ name: name2, data = [], tooltip = true, legend = true, children, ...props }, ref) {
  function renderDefaultRadar() {
    const indicator = data.map(([name3, max]) => ({ name: name3, max }));
    return /* @__PURE__ */ import_react9.default.createElement(Radar_default, {
      indicator
    });
  }
  function renderDefaultRadarLine() {
    return /* @__PURE__ */ import_react9.default.createElement(RadarLine_default, {
      name: name2,
      data: data.map(([, , value]) => value)
    });
  }
  const components = import_react9.Children.toArray(children);
  const series = components.filter(isSeries);
  return /* @__PURE__ */ import_react9.default.createElement(EChartsContext.Provider, {
    value: { chartType: "radar", dataName: name2 }
  }, /* @__PURE__ */ import_react9.default.createElement(ECharts_default, {
    ref,
    ...props
  }, !components.find((comp) => is(comp, "radar")) && renderDefaultRadar(), !components.find((comp) => is(comp, "radarLine")) && renderDefaultRadarLine(), tooltip && /* @__PURE__ */ import_react9.default.createElement(Tooltip_default, null), legend && /* @__PURE__ */ import_react9.default.createElement(Legend_default, {
    icon: "rect",
    itemWidth: 14
  }), components.map((child) => {
    if (data.length && isSeries(child) && !child.props.data) {
      const serieIndex = series.indexOf(child);
      return (0, import_react9.cloneElement)(child, { data: data.map((d) => d[serieIndex + 2]) });
    }
    return child;
  })));
}
if (process.env.NODE_ENV !== "production") {
  RadarChart2.displayName = "RadarChart";
}
var RadarChart_default = import_react9.default.forwardRef(RadarChart2);

// src/charts/SankeyChart.tsx
var import_react10 = __toESM(require("react"));
function SankeyChart2({ name: name2, data = [], children, ...props }, ref) {
  function renderDefaultSankey() {
    return /* @__PURE__ */ import_react10.default.createElement(Sankey_default, {
      name: name2,
      ...data
    });
  }
  const components = import_react10.Children.toArray(children);
  const sankey = components.find((comp) => is(comp, "sankey"));
  return /* @__PURE__ */ import_react10.default.createElement(EChartsContext.Provider, {
    value: { chartType: "sankey", dataName: name2 }
  }, /* @__PURE__ */ import_react10.default.createElement(ECharts_default, {
    ref,
    ...props
  }, /* @__PURE__ */ import_react10.default.createElement(Tooltip_default, null), !sankey && renderDefaultSankey(), children));
}
var SankeyChart_default = import_react10.default.forwardRef(SankeyChart2);

// src/charts/ScatterChart.tsx
var import_react11 = __toESM(require("react"));
var import_lodash23 = __toESM(require("lodash.merge"));
var xAxisProps = {
  axisLine: {
    symbol: ["none", "arrow"],
    symbolSize: [9, 9]
  },
  nameLocation: "middle",
  nameGap: 25,
  nameTextStyle: {
    fontSize: 14,
    color: "#272c36"
  }
};
var yAxisProps = {
  axisLine: {
    show: true,
    symbol: ["none", "arrow"],
    symbolSize: [9, 9]
  },
  splitLine: false,
  nameLocation: "middle",
  nameGap: 35,
  nameTextStyle: {
    fontSize: 14,
    lineHeight: 20,
    color: "#272c36"
  }
};
function ScatterChart2({ name: name2, data = [], tooltip = true, legend = true, children, ...props }, ref) {
  function renderDefaultScatter() {
    return /* @__PURE__ */ import_react11.default.createElement(Scatter_default, {
      name: name2,
      data
    });
  }
  const components = import_react11.Children.toArray(children);
  return /* @__PURE__ */ import_react11.default.createElement(EChartsContext.Provider, {
    value: { chartType: "scatter", dataName: name2 }
  }, /* @__PURE__ */ import_react11.default.createElement(ECharts_default, {
    ref,
    ...props
  }, !components.find((comp) => is(comp, "xAxis")) && /* @__PURE__ */ import_react11.default.createElement(XAxis_default, {
    ...xAxisProps
  }), !components.find((comp) => is(comp, "yAxis")) && /* @__PURE__ */ import_react11.default.createElement(YAxis_default, {
    ...yAxisProps
  }), !components.find((comp) => is(comp, "scatter")) && renderDefaultScatter(), tooltip && /* @__PURE__ */ import_react11.default.createElement(Tooltip_default, null), legend && /* @__PURE__ */ import_react11.default.createElement(Legend_default, {
    icon: "circle",
    itemHeight: 10,
    itemWidth: 10,
    itemGap: 30
  }), components.map((child) => {
    if (is(child, "xAxis")) {
      return (0, import_react11.cloneElement)(child, (0, import_lodash23.default)(xAxisProps, child.props));
    }
    if (is(child, "yAxis")) {
      return (0, import_react11.cloneElement)(child, (0, import_lodash23.default)(yAxisProps, child.props));
    }
    return child;
  })));
}
var ScatterChart_default = import_react11.default.forwardRef(ScatterChart2);

// src/charts/TreeChart.tsx
var import_react12 = __toESM(require("react"));
function TreeChart2({ data = [], children, ...props }, ref) {
  function renderDefaultTree() {
    return /* @__PURE__ */ import_react12.default.createElement(Tree_default, {
      data
    });
  }
  const components = import_react12.Children.toArray(children);
  const tree = components.find((comp) => is(comp, "tree"));
  return /* @__PURE__ */ import_react12.default.createElement(EChartsContext.Provider, {
    value: { chartType: "tree", dataName: name }
  }, /* @__PURE__ */ import_react12.default.createElement(ECharts_default, {
    ref,
    ...props
  }, /* @__PURE__ */ import_react12.default.createElement(Tooltip_default, null), !tree && renderDefaultTree(), children));
}
var TreeChart_default = import_react12.default.forwardRef(TreeChart2);

// src/charts/TreemapChart.tsx
var import_react13 = __toESM(require("react"));
var treemapTooltipFormatter = ({ seriesName, name: name2, value }) => `${name2}<br>${seriesName}: ${value}`;
function TreemapChart2({ name: name2, data = [], children, ...props }, ref) {
  function renderDefaultTreemap() {
    return /* @__PURE__ */ import_react13.default.createElement(Treemap_default, {
      name: name2,
      data
    });
  }
  const components = import_react13.Children.toArray(children);
  const treemap = components.find((comp) => is(comp, "treemap"));
  return /* @__PURE__ */ import_react13.default.createElement(EChartsContext.Provider, {
    value: { chartType: "treemap", dataName: name2 }
  }, /* @__PURE__ */ import_react13.default.createElement(ECharts_default, {
    ref,
    ...props
  }, /* @__PURE__ */ import_react13.default.createElement(Tooltip_default, {
    formatter: treemapTooltipFormatter
  }), /* @__PURE__ */ import_react13.default.createElement(VisualMap_default, null), !treemap && renderDefaultTreemap(), children));
}
var TreemapChart_default = import_react13.default.forwardRef(TreemapChart2);

// src/index.ts
var src_default = ECharts_default;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BarChart,
  Bars,
  DataZoom,
  Dataset,
  Funnel,
  FunnelChart,
  Legend,
  Line,
  LineChart,
  Map,
  MapChart,
  Pie,
  PieChart,
  Radar,
  RadarChart,
  RadarLine,
  Sankey,
  SankeyChart,
  Scatter,
  ScatterChart,
  Tooltip,
  Tree,
  TreeChart,
  Treemap,
  TreemapChart,
  VisualMap,
  XAxis,
  YAxis
});
